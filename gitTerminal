//Use the following in terminal
//for reference use this link or search for github tutorial: https://www.youtube.com/watch?v=RGOj5yH7evk

//to clone repository:
git clone (paste repository https)

//change directory within folder:
cd (folder_name)

// are you in a git repository? lets find out: (will reveal hidden folders)
//ls = list
//look for .git folder, this means you are in git repository, it saves your changes over time
ls -la

//status of git: this shows all files updated or deleted but haven't been saved in a commit yet
git status

//track all files before saving to git:
//. = all
// otherwise, you could type the individual file you want to track ie: getTerminal
git add .

//make commit and save *Locally*
//-m "enter your message" = message (1st -m is for title of message, 2nd -m is for description)
git commit -m "title" -m "description"

//short hand: you need to do 'git add' then 'git commit' to commit, so a short hand is '-am' = add message
git commit -am

//Make commit live by Push
//origin = location of git repository
//master = name of branch
git push origin master

//investigating branches: 'git branch' will result in *branchName (ie '* main' telling you are in the main branch)
git branch

//create a new branch: 'get checkout' is used to switch between branches. adding '-b newFileName' creates a new branch
git checkout -b newFileName

// deleting branches: '-d' = delete
git branch -d branchName

//switch between branches
git checkout branchName

// what are the differences between branches? use 'git diff' to compare two versions and lines of code changed
git diff branchName

//frequently adding the master branch to your local file is wise
git merge mainBranchName

// ERROR!!! Did you make an error? here's how to fix
// you added changes via 'git add' and now you want to undo that:
//this reverses the staging (fileNameToUnstage is not necessary)
git reset fileNameToUnstage

//ERROR!!! did you already commit a change to the main?
// fix by using this: this tells the git to go back a full commit thus nullifying the recent commit in error
git reset HEAD~1

// log of your actions
git log
